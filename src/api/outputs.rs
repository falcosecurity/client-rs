// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `outputs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct request {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a request {
    fn default() -> &'a request {
        <request as ::protobuf::Message>::default_instance()
    }
}

impl request {
    pub fn new() -> request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> request {
        request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<request>(
                "request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static request {
        static instance: ::protobuf::rt::LazyV2<request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(request::new)
    }
}

impl ::protobuf::Clear for request {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct response {
    // message fields
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub priority: super::schema::priority,
    pub source: super::schema::source,
    pub rule: ::std::string::String,
    pub output: ::std::string::String,
    pub output_fields: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub hostname: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a response {
    fn default() -> &'a response {
        <response as ::protobuf::Message>::default_instance()
    }
}

impl response {
    pub fn new() -> response {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp time = 1;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .falco.schema.priority priority = 2;


    pub fn get_priority(&self) -> super::schema::priority {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = super::schema::priority::EMERGENCY;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: super::schema::priority) {
        self.priority = v;
    }

    // .falco.schema.source source = 3;


    pub fn get_source(&self) -> super::schema::source {
        self.source
    }
    pub fn clear_source(&mut self) {
        self.source = super::schema::source::SYSCALL;
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: super::schema::source) {
        self.source = v;
    }

    // string rule = 4;


    pub fn get_rule(&self) -> &str {
        &self.rule
    }
    pub fn clear_rule(&mut self) {
        self.rule.clear();
    }

    // Param is passed by value, moved
    pub fn set_rule(&mut self, v: ::std::string::String) {
        self.rule = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rule(&mut self) -> &mut ::std::string::String {
        &mut self.rule
    }

    // Take field
    pub fn take_rule(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rule, ::std::string::String::new())
    }

    // string output = 5;


    pub fn get_output(&self) -> &str {
        &self.output
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::std::string::String) {
        self.output = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut ::std::string::String {
        &mut self.output
    }

    // Take field
    pub fn take_output(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.output, ::std::string::String::new())
    }

    // repeated .falco.outputs.response.OutputFieldsEntry output_fields = 6;


    pub fn get_output_fields(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.output_fields
    }
    pub fn clear_output_fields(&mut self) {
        self.output_fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_output_fields(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.output_fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_output_fields(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.output_fields
    }

    // Take field
    pub fn take_output_fields(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.output_fields, ::std::collections::HashMap::new())
    }

    // string hostname = 7;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }
}

impl ::protobuf::Message for response {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.priority, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.source, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rule)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.output)?;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.output_fields)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.priority != super::schema::priority::EMERGENCY {
            my_size += ::protobuf::rt::enum_size(2, self.priority);
        }
        if self.source != super::schema::source::SYSCALL {
            my_size += ::protobuf::rt::enum_size(3, self.source);
        }
        if !self.rule.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.rule);
        }
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.output);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.output_fields);
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.hostname);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.priority != super::schema::priority::EMERGENCY {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.priority))?;
        }
        if self.source != super::schema::source::SYSCALL {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.source))?;
        }
        if !self.rule.is_empty() {
            os.write_string(4, &self.rule)?;
        }
        if !self.output.is_empty() {
            os.write_string(5, &self.output)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.output_fields, os)?;
        if !self.hostname.is_empty() {
            os.write_string(7, &self.hostname)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> response {
        response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "time",
                |m: &response| { &m.time },
                |m: &mut response| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::schema::priority>>(
                "priority",
                |m: &response| { &m.priority },
                |m: &mut response| { &mut m.priority },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::schema::source>>(
                "source",
                |m: &response| { &m.source },
                |m: &mut response| { &mut m.source },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rule",
                |m: &response| { &m.rule },
                |m: &mut response| { &mut m.rule },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "output",
                |m: &response| { &m.output },
                |m: &mut response| { &mut m.output },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "output_fields",
                |m: &response| { &m.output_fields },
                |m: &mut response| { &mut m.output_fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hostname",
                |m: &response| { &m.hostname },
                |m: &mut response| { &mut m.hostname },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<response>(
                "response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static response {
        static instance: ::protobuf::rt::LazyV2<response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(response::new)
    }
}

impl ::protobuf::Clear for response {
    fn clear(&mut self) {
        self.time.clear();
        self.priority = super::schema::priority::EMERGENCY;
        self.source = super::schema::source::SYSCALL;
        self.rule.clear();
        self.output.clear();
        self.output_fields.clear();
        self.hostname.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\routputs.proto\x12\rfalco.outputs\x1a\x1fgoogle/protobuf/timestamp.pr\
    oto\x1a\x0cschema.proto\"\t\n\x07request\"\xf5\x02\n\x08response\x12.\n\
    \x04time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x04time\
    \x122\n\x08priority\x18\x02\x20\x01(\x0e2\x16.falco.schema.priorityR\x08\
    priority\x12,\n\x06source\x18\x03\x20\x01(\x0e2\x14.falco.schema.sourceR\
    \x06source\x12\x12\n\x04rule\x18\x04\x20\x01(\tR\x04rule\x12\x16\n\x06ou\
    tput\x18\x05\x20\x01(\tR\x06output\x12N\n\routput_fields\x18\x06\x20\x03\
    (\x0b2).falco.outputs.response.OutputFieldsEntryR\x0coutputFields\x12\
    \x1a\n\x08hostname\x18\x07\x20\x01(\tR\x08hostname\x1a?\n\x11OutputField\
    sEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x012\x7f\n\x07service\x12:\n\x03sub\
    \x12\x16.falco.outputs.request\x1a\x17.falco.outputs.response(\x010\x01\
    \x128\n\x03get\x12\x16.falco.outputs.request\x1a\x17.falco.outputs.respo\
    nse0\x01J\x9b\x10\n\x06\x12\x04\x10\05\x01\n\xbb\x04\n\x01\x0c\x12\x03\
    \x10\0\x122\xb0\x04\nCopyright\x20(C)\x202020\x20The\x20Falco\x20Authors\
    .\n\nLicensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\
    \x20(the\x20\"License\");\nyou\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\nYou\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\nhttp://www.apache.org/l\
    icenses/LICENSE-2.0\n\nUnless\x20required\x20by\x20applicable\x20law\x20\
    or\x20agreed\x20to\x20in\x20writing,\x20software\ndistributed\x20under\
    \x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20B\
    ASIS,\nWITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\
    \x20either\x20express\x20or\x20implied.\nSee\x20the\x20License\x20for\
    \x20the\x20specific\x20language\x20governing\x20permissions\x20and\nlimi\
    tations\x20under\x20the\x20License.\n\n\t\n\x02\x03\0\x12\x03\x12\x07(\n\
    \t\n\x02\x03\x01\x12\x03\x13\x07\x15\n\x08\n\x01\x02\x12\x03\x15\x08\x15\
    \n`\n\x02\x06\0\x12\x04\x1a\0\x1f\x01\x1aT\x20This\x20service\x20defines\
    \x20the\x20RPC\x20methods\n\x20to\x20`request`\x20a\x20stream\x20of\x20o\
    utput\x20`response`s.\n\n\n\n\x03\x06\0\x01\x12\x03\x1a\x08\x0f\nV\n\x04\
    \x06\0\x02\0\x12\x03\x1c\x024\x1aI\x20Subscribe\x20to\x20a\x20stream\x20\
    of\x20Falco\x20outputs\x20by\x20sending\x20a\x20stream\x20of\x20requests\
    .\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x1c\x06\t\n\x0c\n\x05\x06\0\x02\
    \0\x05\x12\x03\x1c\n\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x1c\x11\x18\
    \n\x0c\n\x05\x06\0\x02\0\x06\x12\x03\x1c#)\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\x1c*2\nO\n\x04\x06\0\x02\x01\x12\x03\x1e\x02-\x1aB\x20Get\x20al\
    l\x20the\x20Falco\x20outputs\x20present\x20in\x20the\x20system\x20up\x20\
    to\x20this\x20call.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x1e\x06\t\n\
    \x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x1e\n\x11\n\x0c\n\x05\x06\0\x02\x01\
    \x06\x12\x03\x1e\x1c\"\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x1e#+\n\xef\
    \x01\n\x02\x04\0\x12\x04#\0&\x01\x1a}\x20The\x20`request`\x20message\x20\
    is\x20the\x20logical\x20representation\x20of\x20the\x20request\x20model.\
    \n\x20It\x20is\x20the\x20input\x20of\x20the\x20`output.service`\x20servi\
    ce.\n\"d\x20TODO(leodido,fntlnz):\x20tags\x20not\x20supported\x20yet,\
    \x20keeping\x20it\x20for\x20reference.\n\x20repeated\x20string\x20tags\
    \x20=\x201;\n\n\n\n\x03\x04\0\x01\x12\x03#\x08\x0f\n\xc3\x01\n\x02\x04\
    \x01\x12\x04+\05\x01\x1a\xb6\x01\x20The\x20`response`\x20message\x20is\
    \x20the\x20representation\x20of\x20the\x20output\x20model.\n\x20It\x20co\
    ntains\x20all\x20the\x20elements\x20that\x20Falco\x20emits\x20in\x20an\
    \x20output\x20along\x20with\x20the\n\x20definitions\x20for\x20priorities\
    \x20and\x20source.\n\n\n\n\x03\x04\x01\x01\x12\x03+\x08\x10\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03,\x02%\n\r\n\x05\x04\x01\x02\0\x04\x12\x04,\x02+\
    \x12\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03,\x02\x1b\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03,\x1c\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03,#$\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03-\x02%\n\r\n\x05\x04\x01\x02\x01\x04\
    \x12\x04-\x02,%\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03-\x02\x17\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03-\x18\x20\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03-#$\n\x0b\n\x04\x04\x01\x02\x02\x12\x03.\x02!\n\r\n\x05\x04\
    \x01\x02\x02\x04\x12\x04.\x02-%\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03.\
    \x02\x15\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03.\x16\x1c\n\x0c\n\x05\
    \x04\x01\x02\x02\x03\x12\x03.\x1f\x20\n\x0b\n\x04\x04\x01\x02\x03\x12\
    \x03/\x02\x12\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04/\x02.!\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03/\t\r\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03/\x10\x11\n\x0b\n\
    \x04\x04\x01\x02\x04\x12\x030\x02\x14\n\r\n\x05\x04\x01\x02\x04\x04\x12\
    \x040\x02/\x12\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x030\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\x04\x01\x12\x030\t\x0f\n\x0c\n\x05\x04\x01\x02\x04\x03\
    \x12\x030\x12\x13\n\x0b\n\x04\x04\x01\x02\x05\x12\x031\x02(\n\r\n\x05\
    \x04\x01\x02\x05\x04\x12\x041\x020\x14\n\x0c\n\x05\x04\x01\x02\x05\x06\
    \x12\x031\x02\x15\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x031\x16#\n\x0c\n\
    \x05\x04\x01\x02\x05\x03\x12\x031&'\nq\n\x04\x04\x01\x02\x06\x12\x032\
    \x02\x16\"d\x20TODO(leodido,fntlnz):\x20tags\x20not\x20supported\x20yet,\
    \x20keeping\x20it\x20for\x20reference.\n\x20repeated\x20string\x20tags\
    \x20=\x208;\n\n\r\n\x05\x04\x01\x02\x06\x04\x12\x042\x021(\n\x0c\n\x05\
    \x04\x01\x02\x06\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\
    \x12\x032\t\x11\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x032\x14\x15b\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
