// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `version.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct request {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a request {
    fn default() -> &'a request {
        <request as ::protobuf::Message>::default_instance()
    }
}

impl request {
    pub fn new() -> request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> request {
        request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<request>(
                "request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static request {
        static instance: ::protobuf::rt::LazyV2<request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(request::new)
    }
}

impl ::protobuf::Clear for request {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct response {
    // message fields
    pub version: ::std::string::String,
    pub major: u32,
    pub minor: u32,
    pub patch: u32,
    pub prerelease: ::std::string::String,
    pub build: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a response {
    fn default() -> &'a response {
        <response as ::protobuf::Message>::default_instance()
    }
}

impl response {
    pub fn new() -> response {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // uint32 major = 2;


    pub fn get_major(&self) -> u32 {
        self.major
    }
    pub fn clear_major(&mut self) {
        self.major = 0;
    }

    // Param is passed by value, moved
    pub fn set_major(&mut self, v: u32) {
        self.major = v;
    }

    // uint32 minor = 3;


    pub fn get_minor(&self) -> u32 {
        self.minor
    }
    pub fn clear_minor(&mut self) {
        self.minor = 0;
    }

    // Param is passed by value, moved
    pub fn set_minor(&mut self, v: u32) {
        self.minor = v;
    }

    // uint32 patch = 4;


    pub fn get_patch(&self) -> u32 {
        self.patch
    }
    pub fn clear_patch(&mut self) {
        self.patch = 0;
    }

    // Param is passed by value, moved
    pub fn set_patch(&mut self, v: u32) {
        self.patch = v;
    }

    // string prerelease = 5;


    pub fn get_prerelease(&self) -> &str {
        &self.prerelease
    }
    pub fn clear_prerelease(&mut self) {
        self.prerelease.clear();
    }

    // Param is passed by value, moved
    pub fn set_prerelease(&mut self, v: ::std::string::String) {
        self.prerelease = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prerelease(&mut self) -> &mut ::std::string::String {
        &mut self.prerelease
    }

    // Take field
    pub fn take_prerelease(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prerelease, ::std::string::String::new())
    }

    // string build = 6;


    pub fn get_build(&self) -> &str {
        &self.build
    }
    pub fn clear_build(&mut self) {
        self.build.clear();
    }

    // Param is passed by value, moved
    pub fn set_build(&mut self, v: ::std::string::String) {
        self.build = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_build(&mut self) -> &mut ::std::string::String {
        &mut self.build
    }

    // Take field
    pub fn take_build(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.build, ::std::string::String::new())
    }
}

impl ::protobuf::Message for response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.major = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minor = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.patch = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prerelease)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.build)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if self.major != 0 {
            my_size += ::protobuf::rt::value_size(2, self.major, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minor != 0 {
            my_size += ::protobuf::rt::value_size(3, self.minor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.patch != 0 {
            my_size += ::protobuf::rt::value_size(4, self.patch, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.prerelease.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.prerelease);
        }
        if !self.build.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.build);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if self.major != 0 {
            os.write_uint32(2, self.major)?;
        }
        if self.minor != 0 {
            os.write_uint32(3, self.minor)?;
        }
        if self.patch != 0 {
            os.write_uint32(4, self.patch)?;
        }
        if !self.prerelease.is_empty() {
            os.write_string(5, &self.prerelease)?;
        }
        if !self.build.is_empty() {
            os.write_string(6, &self.build)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> response {
        response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &response| { &m.version },
                |m: &mut response| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "major",
                |m: &response| { &m.major },
                |m: &mut response| { &mut m.major },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "minor",
                |m: &response| { &m.minor },
                |m: &mut response| { &mut m.minor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "patch",
                |m: &response| { &m.patch },
                |m: &mut response| { &mut m.patch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prerelease",
                |m: &response| { &m.prerelease },
                |m: &mut response| { &mut m.prerelease },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "build",
                |m: &response| { &m.build },
                |m: &mut response| { &mut m.build },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<response>(
                "response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static response {
        static instance: ::protobuf::rt::LazyV2<response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(response::new)
    }
}

impl ::protobuf::Clear for response {
    fn clear(&mut self) {
        self.version.clear();
        self.major = 0;
        self.minor = 0;
        self.patch = 0;
        self.prerelease.clear();
        self.build.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rversion.proto\x12\rfalco.version\"\t\n\x07request\"\x9c\x01\n\x08res\
    ponse\x12\x18\n\x07version\x18\x01\x20\x01(\tR\x07version\x12\x14\n\x05m\
    ajor\x18\x02\x20\x01(\rR\x05major\x12\x14\n\x05minor\x18\x03\x20\x01(\rR\
    \x05minor\x12\x14\n\x05patch\x18\x04\x20\x01(\rR\x05patch\x12\x1e\n\npre\
    release\x18\x05\x20\x01(\tR\nprerelease\x12\x14\n\x05build\x18\x06\x20\
    \x01(\tR\x05build2E\n\x07service\x12:\n\x07version\x12\x16.falco.version\
    .request\x1a\x17.falco.version.responseJ\x8f\x0b\n\x06\x12\x04\x10\0+\
    \x01\n\xbb\x04\n\x01\x0c\x12\x03\x10\0\x122\xb0\x04\nCopyright\x20(C)\
    \x202020\x20The\x20Falco\x20Authors.\n\nLicensed\x20under\x20the\x20Apac\
    he\x20License,\x20Version\x202.0\x20(the\x20\"License\");\nyou\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\nYou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Licen\
    se\x20at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\ndistributed\x20under\x20the\x20License\x20is\x20distribute\
    d\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\nWITHOUT\x20WARRANTIES\x20OR\x20\
    CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\
    \nSee\x20the\x20License\x20for\x20the\x20specific\x20language\x20governi\
    ng\x20permissions\x20and\nlimitations\x20under\x20the\x20License.\n\n\
    \x08\n\x01\x02\x12\x03\x12\x08\x15\nL\n\x02\x06\0\x12\x04\x17\0\x19\x01\
    \x1a@\x20This\x20service\x20defines\x20a\x20RPC\x20call\n\x20to\x20reque\
    st\x20the\x20Falco\x20version.\n\n\n\n\x03\x06\0\x01\x12\x03\x17\x08\x0f\
    \n\x0b\n\x04\x06\0\x02\0\x12\x03\x18\x02*\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\x18\x06\r\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x18\x0e\x15\n\x0c\
    \n\x05\x06\0\x02\0\x03\x12\x03\x18\x20(\n4\n\x02\x04\0\x12\x04\x1c\0\x1e\
    \x01\x1a(\x20The\x20`request`\x20message\x20is\x20an\x20empty\x20one.\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x1c\x08\x0f\n\xb9\x01\n\x02\x04\x01\x12\x04\
    #\0+\x01\x1a\xac\x01\x20The\x20`response`\x20message\x20contains\x20the\
    \x20version\x20of\x20Falco.\n\x20It\x20provides\x20the\x20whole\x20versi\
    on\x20as\x20a\x20string\x20and\x20also\n\x20its\x20parts\x20as\x20per\
    \x20semver\x202.0\x20specification\x20(https://semver.org).\n\n\n\n\x03\
    \x04\x01\x01\x12\x03#\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03%\x02\x15\
    \n\r\n\x05\x04\x01\x02\0\x04\x12\x04%\x02$\x01\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03%\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03%\t\x10\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03%\x13\x14\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03&\x02\x13\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04&\x02%\x15\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03&\t\x0e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03&\x11\x12\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03'\x02\x13\n\r\n\x05\x04\x01\x02\x02\
    \x04\x12\x04'\x02&\x13\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03'\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03'\t\x0e\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03'\x11\x12\n\x0b\n\x04\x04\x01\x02\x03\x12\x03(\x02\x13\n\
    \r\n\x05\x04\x01\x02\x03\x04\x12\x04(\x02'\x13\n\x0c\n\x05\x04\x01\x02\
    \x03\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03(\t\x0e\
    \n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03(\x11\x12\n\x0b\n\x04\x04\x01\
    \x02\x04\x12\x03)\x02\x18\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04)\x02(\
    \x13\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x03)\t\x13\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03)\
    \x16\x17\n\x0b\n\x04\x04\x01\x02\x05\x12\x03*\x02\x13\n\r\n\x05\x04\x01\
    \x02\x05\x04\x12\x04*\x02)\x18\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03*\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03*\t\x0e\n\x0c\n\x05\x04\
    \x01\x02\x05\x03\x12\x03*\x11\x12b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
